{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","winLine","this","key","squares","includes","n","items","fila","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","slice","length","calculateWinner","winner","setState","concat","latestMoveSquare","XO","step","status","current","winInfo","myJump","moves","map","move","col","row","Math","floor","desc","divStyle","fontWeight","style","jumpTo","reverse","statusClassName","isDraw","handleClick","line","handleSortToggle","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.036e2e51.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    const className = 'square' + (props.highlight ? ' highlight' : '');\n    return (\n        <button className={className} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        const winLine = this.props.winLine;\n        return (\n            <Square\n                key={i}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                highlight={winLine && winLine.includes(i)}\n            />\n        );\n    }\n\n    render() {\n        let n = 0;\n        let items = [];\n        for (let i = 0; i < 3; i++) {\n            let fila = [];\n            for (let j = 0; j < 3; j++) {\n                fila.push(this.renderSquare(n++));\n            }\n            items.push(<div key={i} className=\"board-row\">{fila}</div>);\n        }\n\n        return (\n            <div>{items}</div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n            isAscending: true\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares).winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                // Store the index and Player of the latest moved square\n                latestMoveSquare: i,\n                XO: squares[i]\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n\n    handleSortToggle() {\n        this.setState({\n            isAscending: !this.state.isAscending\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winInfo = calculateWinner(current.squares);\n        const winner = winInfo.winner;\n        const myJump = this.state.stepNumber;\n\n        let moves = history.map((step, move) => {\n            const latestMoveSquare = step.latestMoveSquare;\n            const XO = step.XO;\n            const col = 1 + latestMoveSquare % 3;\n            const row = 1 + Math.floor(latestMoveSquare / 3);\n            const desc = move ?\n                `Go to move #${move} x \"${XO}\" en (${col}, ${row}) ` :\n                'Go to game start';\n            const divStyle = (myJump === move) ? { fontWeight: 'bold' } : { fontWeight: 'normal' };\n            return (\n                <li key={move} >\n                    <button style={divStyle} onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n        const isAscending = this.state.isAscending;\n        if (!isAscending) {\n            moves.reverse();\n        }\n\n        let status;\n        let statusClassName = 'status-info  highlight';\n        if (winner) {\n            status = ' Winner: ' + winner;\n        } else {\n            if (winInfo.isDraw){\n                status = \"Draw\";\n            } else {\n                status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n                statusClassName = 'status-info';\n            }\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                        winLine={winInfo.line}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div className={statusClassName}>{status}</div>\n                    <button onClick={() => this.handleSortToggle()}>\n                        {isAscending ? 'descending' : 'ascending'}\n                    </button>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                winner: squares[a],\n                line: lines[i],\n                isDraw: false,\n            };\n        }\n    }\n\n    let isDraw = true;\n    for (let i = 0; i < squares.length; i++) {\n        if (squares[i] === null) {\n            isDraw = false;\n            break;\n        };\n    }\n\n    return {\n        winner: null,\n        line: null,\n        isDraw: isDraw,\n    };\n}\n"],"sourceRoot":""}